// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`For When_'for (x = 1; x < 10; x++) { y++; }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [
      Object {
        "expression": Object {
          "argument": Object {
            "datatype": "unknown",
            "name": "y",
            "type": "Identifier",
          },
          "operator": "++",
          "prefix": false,
          "type": "UpdateExpression",
        },
        "type": "ExpressionStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "init": Object {
    "left": Object {
      "datatype": "unknown",
      "name": "x",
      "type": "Identifier",
    },
    "operator": "=",
    "right": Object {
      "raw": "1",
      "type": "Literal",
      "value": 1,
    },
    "type": "FlexiAssignmentExpression",
  },
  "test": Object {
    "left": Object {
      "datatype": "unknown",
      "name": "x",
      "type": "Identifier",
    },
    "operator": "<",
    "right": Object {
      "raw": "10",
      "type": "Literal",
      "value": 10,
    },
    "type": "BinaryExpression",
  },
  "type": "ForStatement",
  "update": Object {
    "argument": Object {
      "datatype": "unknown",
      "name": "x",
      "type": "Identifier",
    },
    "operator": "++",
    "prefix": false,
    "type": "UpdateExpression",
  },
}
`;

exports[`For When_'for(;;) { continue; }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [
      Object {
        "type": "ContinueStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "init": undefined,
  "test": undefined,
  "type": "ForStatement",
  "update": undefined,
}
`;

exports[`FunctionDefinition When_'int foo() { return 10;} '_Should_ParseSuccessfully 1`] = `
Object {
  "body": Array [
    Object {
      "body": Array [
        Object {
          "body": Object {
            "body": Array [
              Object {
                "argument": Object {
                  "raw": "10",
                  "type": "Literal",
                  "value": 10,
                },
                "type": "ReturnStatement",
              },
            ],
            "type": "BlockStatement",
          },
          "id": Object {
            "datatype": "int",
            "name": "foo",
            "type": "Identifier",
          },
          "params": Array [],
          "type": "FunctionDeclaration",
        },
      ],
      "type": "BlockStatement",
    },
  ],
  "sourceType": "script",
  "type": "Program",
}
`;

exports[`If When_'if (x == -1) { x = 10; } else { x = x - 1; } '_Should_ParseSuccessfully 1`] = `
Object {
  "alternate": Object {
    "body": Array [
      Object {
        "expression": Object {
          "left": Object {
            "datatype": "unknown",
            "name": "x",
            "type": "Identifier",
          },
          "operator": "=",
          "right": Object {
            "left": Object {
              "datatype": "unknown",
              "name": "x",
              "type": "Identifier",
            },
            "operator": "-",
            "right": Object {
              "raw": "1",
              "type": "Literal",
              "value": 1,
            },
            "type": "BinaryExpression",
          },
          "type": "FlexiAssignmentExpression",
        },
        "type": "ExpressionStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "consequent": Object {
    "body": Array [
      Object {
        "expression": Object {
          "left": Object {
            "datatype": "unknown",
            "name": "x",
            "type": "Identifier",
          },
          "operator": "=",
          "right": Object {
            "raw": "10",
            "type": "Literal",
            "value": 10,
          },
          "type": "FlexiAssignmentExpression",
        },
        "type": "ExpressionStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "test": Object {
    "left": Object {
      "datatype": "unknown",
      "name": "x",
      "type": "Identifier",
    },
    "operator": "==",
    "right": Object {
      "argument": Object {
        "raw": "1",
        "type": "Literal",
        "value": 1,
      },
      "operator": "-",
      "prefix": true,
      "type": "UnaryExpression",
    },
    "type": "BinaryExpression",
  },
  "type": "IfStatement",
}
`;

exports[`If When_'if (x == 1) { x = 10; } '_Should_ParseSuccessfully 1`] = `
Object {
  "alternate": undefined,
  "consequent": Object {
    "body": Array [
      Object {
        "expression": Object {
          "left": Object {
            "datatype": "unknown",
            "name": "x",
            "type": "Identifier",
          },
          "operator": "=",
          "right": Object {
            "raw": "10",
            "type": "Literal",
            "value": 10,
          },
          "type": "FlexiAssignmentExpression",
        },
        "type": "ExpressionStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "test": Object {
    "left": Object {
      "datatype": "unknown",
      "name": "x",
      "type": "Identifier",
    },
    "operator": "==",
    "right": Object {
      "raw": "1",
      "type": "Literal",
      "value": 1,
    },
    "type": "BinaryExpression",
  },
  "type": "IfStatement",
}
`;

exports[`While When_'while (1) { }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [],
    "type": "BlockStatement",
  },
  "test": Object {
    "raw": "1",
    "type": "Literal",
    "value": 1,
  },
  "type": "WhileStatement",
}
`;

exports[`While When_'while (1) { break; }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [
      Object {
        "type": "BreakStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "test": Object {
    "raw": "1",
    "type": "Literal",
    "value": 1,
  },
  "type": "WhileStatement",
}
`;

exports[`While When_'while (1) { continue; }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [
      Object {
        "type": "ContinueStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "test": Object {
    "raw": "1",
    "type": "Literal",
    "value": 1,
  },
  "type": "WhileStatement",
}
`;

exports[`While When_'while (1) { return -x + 10; }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [
      Object {
        "argument": Object {
          "left": Object {
            "argument": Object {
              "datatype": "unknown",
              "name": "x",
              "type": "Identifier",
            },
            "operator": "-",
            "prefix": true,
            "type": "UnaryExpression",
          },
          "operator": "+",
          "right": Object {
            "raw": "10",
            "type": "Literal",
            "value": 10,
          },
          "type": "BinaryExpression",
        },
        "type": "ReturnStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "test": Object {
    "raw": "1",
    "type": "Literal",
    "value": 1,
  },
  "type": "WhileStatement",
}
`;

exports[`While When_'while (10 + 5 < x) { x--; }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [
      Object {
        "expression": Object {
          "argument": Object {
            "datatype": "unknown",
            "name": "x",
            "type": "Identifier",
          },
          "operator": "--",
          "prefix": false,
          "type": "UpdateExpression",
        },
        "type": "ExpressionStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "test": Object {
    "left": Object {
      "left": Object {
        "raw": "10",
        "type": "Literal",
        "value": 10,
      },
      "operator": "+",
      "right": Object {
        "raw": "5",
        "type": "Literal",
        "value": 5,
      },
      "type": "BinaryExpression",
    },
    "operator": "<",
    "right": Object {
      "datatype": "unknown",
      "name": "x",
      "type": "Identifier",
    },
    "type": "BinaryExpression",
  },
  "type": "WhileStatement",
}
`;

exports[`While When_'while (x < 5) { x++; }'_Should_ParseSuccessfully 1`] = `
Object {
  "body": Object {
    "body": Array [
      Object {
        "expression": Object {
          "argument": Object {
            "datatype": "unknown",
            "name": "x",
            "type": "Identifier",
          },
          "operator": "++",
          "prefix": false,
          "type": "UpdateExpression",
        },
        "type": "ExpressionStatement",
      },
    ],
    "type": "BlockStatement",
  },
  "test": Object {
    "left": Object {
      "datatype": "unknown",
      "name": "x",
      "type": "Identifier",
    },
    "operator": "<",
    "right": Object {
      "raw": "5",
      "type": "Literal",
      "value": 5,
    },
    "type": "BinaryExpression",
  },
  "type": "WhileStatement",
}
`;
